$dark-color: #000814;
$primary-color: #003566;
$secondary-color: #EBF5F7;
$tertiary-color: #ffd166;
$wrong-color: #ef476f;
$right-color: #06d6a0;

input {
  display: none;
}

* {
  box-sizing: border-box;
  font-family: 'Red Hat Display', sans-serif;
}

body {
  color:$secondary-color;
  margin: 0;
  padding: 0;
}

.game {
  text-align: center;
  min-height: 100vh;
  min-width: 100vw;
  padding-top: 50px;
  background: $dark-color;
}

.board {
  width: 260px;
  margin: 10px auto;
  position: relative;
}

.layers {
  height: 260px;
}

.grid-layer {
  display: flex;
  flex-wrap: wrap;
  width: 260px;
  position: absolute;
  left: 0;
  right: 0;

  label {
    border-radius: 5px;
    margin: 1px;
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    background: $primary-color;
    color: $right-color;
  }
}

$fields: 
0, 1, 0, 0, 1,
0, 0, 1, 0, 0,
1, 1, 0, 0, 1,
0, 0, 1, 0, 1,
0, 0, 1, 1, 1;

$fieldsCount: length($fields);


@for $i from 1 through $fieldsCount {
  #field-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i} {
    background: $secondary-color;
    pointer-events: none;
    z-index: 5;
  }
}

.action-type {
  & + label {
    border-radius: 20px;
    margin: 0 5px;
    cursor: pointer;
    padding: 5px;
    width: 80px;
    display: inline-block;

    font-weight: bold;
    opacity: 1;
    color: $secondary-color;
    background-color:$right-color;
  }
}

.flags-layer {
  label:after {
    content: '?';
    color: $secondary-color;
  }
}

.board {
  #mark:checked ~ .fields-layer label {
    pointer-events: none;
  }

  .flags-layer {
    visibility: hidden;

    label {
      visibility: hidden;

      #mark:checked ~ & {
        visibility: visible;
      }

      #dig:checked ~ & {
        pointer-events: none;
      }
    }
  }
}

@for $i from 1 through $fieldsCount {
  #flag-checkbox#{$i}:checked ~ .layers .flags-layer #flag#{$i} {
    background: $tertiary-color;
    visibility: visible !important;

    &:after {
      content: "ðŸ’£";
    }
  }

  #field-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i} {
    z-index: 5;
  }

  #flag-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i} {
    pointer-events: none;
  }

  #field-checkbox#{$i}:checked ~ .layers .flags-layer #flag#{$i} {
    pointer-events: none;
  }
}

.loser-screen, .winner-screen {
  width: 100%;
  height: 100%;
  position: absolute;
  visibility: hidden;
  top: 0;
  left: 0;

  button {
    width: 100%;
    height: 100%;
    cursor: pointer;
    background: none;
    color: $secondary-color;
    font-size: 20px;
    border: none;
  }
}

.winner-screen {
  background-color: $right-color;

  button {
    color: black;
  }
}

.loser-screen{
  background-color: $wrong-color;

  button {
    color: white;
  }
}

$allEmptyFieldsCheckedCombinedSelector: ();

@function hasMine($fieldIndex) {
  @return nth($fields, $fieldIndex) == 1
}

@for $i from 1 through $fieldsCount {
  // create rules only for fields with mines
  @if hasMine($i) {
    // the uncovered field should be red if it contains bomb
    #field-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i} {
      background: $wrong-color;
    }

    #field-checkbox#{$i}:checked ~ .layers .finish-layer .loser-screen {
      visibility: visible;
      z-index: 10;
    }
  }

  @if hasMine($i) == false {
    $allEmptyFieldsCheckedCombinedSelector: append($allEmptyFieldsCheckedCombinedSelector, unquote('#field-checkbox#{$i}:checked ~ '), space);
  }
}

#{$allEmptyFieldsCheckedCombinedSelector} .layers .finish-layer .winner-screen {
  visibility: visible;
  z-index: 10;
}


$fieldsPerRow: 5;

@function neighborExists($field, $direction) {
  @if $direction == 'up' {
    @return $field - $fieldsPerRow > 0
  }

  @if $direction == 'down' {
    @return $field + $fieldsPerRow <= length($fields)
  }

  @if $direction == 'right' {
    @return $field % $fieldsPerRow != 0
  }

  @if $direction == 'left' {
    @return $field % $fieldsPerRow != 1
  }
}

@for $i from 1 through length($fields) {
  $minesAround: 0;
  @if neighborExists($i, 'up') and hasMine($i - $fieldsPerRow) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'down') and hasMine($i + $fieldsPerRow) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'right') and hasMine($i + 1) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'left') and hasMine($i - 1) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'left') and neighborExists($i - 1, 'up') and hasMine($i - 1 - $fieldsPerRow) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'right') and neighborExists($i + 1, 'up') and hasMine($i + 1 - $fieldsPerRow) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'left') and neighborExists($i - 1, 'down') and hasMine($i - 1 + $fieldsPerRow) {
    $minesAround: $minesAround + 1;
  }
  @if neighborExists($i, 'right') and neighborExists($i + 1, 'down') and hasMine($i + 1 + $fieldsPerRow ) {
    $minesAround: $minesAround + 1;
  }

  @if hasMine($i) == false {
    #field-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i}:after {
      content: '' + $minesAround
    }
  }
}

$minesCount: 0;

@each $field in $fields {
  @if $field == 1 {
    $minesCount: $minesCount + 1
  }
}

body {
  counter-reset: markedFieldsCount uncoveredFieldsCount;
}

@for $i from 1 through $fieldsCount {
  #flag-checkbox#{$i}:checked ~ .layers .flags-layer #flag#{$i} {
    counter-increment: markedFieldsCount
  }

  #field-checkbox#{$i}:checked ~ .layers .fields-layer #field#{$i} {
    counter-increment: uncoveredFieldsCount
  }
}

.game-stats {
  text-align: center;
  font-size: 12px;
  color: light-color;
  margin: 10px 0;

  .fields:after {
    content: 'Uncovered fields: ' counter(uncoveredFieldsCount) '/' + ($fieldsCount - $minesCount)
  }

  .mines:after {
    content: 'Marked mines: ' counter(markedFieldsCount) '/' + $minesCount
  }
}
